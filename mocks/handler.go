// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	handler "go.fork.vn/log/handler"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockHandler) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockHandler_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockHandler_Expecter) Close() *MockHandler_Close_Call {
	return &MockHandler_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockHandler_Close_Call) Run(run func()) *MockHandler_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_Close_Call) Return(_a0 error) *MockHandler_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Close_Call) RunAndReturn(run func() error) *MockHandler_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Log provides a mock function with given fields: level, message, args
func (_m *MockHandler) Log(level handler.Level, message string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, level, message)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Log")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(handler.Level, string, ...interface{}) error); ok {
		r0 = rf(level, message, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHandler_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type MockHandler_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - level handler.Level
//   - message string
//   - args ...interface{}
func (_e *MockHandler_Expecter) Log(level interface{}, message interface{}, args ...interface{}) *MockHandler_Log_Call {
	return &MockHandler_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{level, message}, args...)...)}
}

func (_c *MockHandler_Log_Call) Run(run func(level handler.Level, message string, args ...interface{})) *MockHandler_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(handler.Level), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockHandler_Log_Call) Return(_a0 error) *MockHandler_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Log_Call) RunAndReturn(run func(handler.Level, string, ...interface{}) error) *MockHandler_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
