// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	handler "go.fork.vn/log/handler"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// AddHandler provides a mock function with given fields: name, _a1
func (_m *MockManager) AddHandler(name string, _a1 handler.Handler) {
	_m.Called(name, _a1)
}

// MockManager_AddHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHandler'
type MockManager_AddHandler_Call struct {
	*mock.Call
}

// AddHandler is a helper method to define mock.On call
//   - name string
//   - _a1 handler.Handler
func (_e *MockManager_Expecter) AddHandler(name interface{}, _a1 interface{}) *MockManager_AddHandler_Call {
	return &MockManager_AddHandler_Call{Call: _e.mock.On("AddHandler", name, _a1)}
}

func (_c *MockManager_AddHandler_Call) Run(run func(name string, _a1 handler.Handler)) *MockManager_AddHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(handler.Handler))
	})
	return _c
}

func (_c *MockManager_AddHandler_Call) Return() *MockManager_AddHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_AddHandler_Call) RunAndReturn(run func(string, handler.Handler)) *MockManager_AddHandler_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockManager) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockManager_Expecter) Close() *MockManager_Close_Call {
	return &MockManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockManager_Close_Call) Run(run func()) *MockManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Close_Call) Return(_a0 error) *MockManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Close_Call) RunAndReturn(run func() error) *MockManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Debug provides a mock function with given fields: message, args
func (_m *MockManager) Debug(message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockManager_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockManager_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - message string
//   - args ...interface{}
func (_e *MockManager_Expecter) Debug(message interface{}, args ...interface{}) *MockManager_Debug_Call {
	return &MockManager_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{message}, args...)...)}
}

func (_c *MockManager_Debug_Call) Run(run func(message string, args ...interface{})) *MockManager_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_Debug_Call) Return() *MockManager_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Debug_Call) RunAndReturn(run func(string, ...interface{})) *MockManager_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function with given fields: message, args
func (_m *MockManager) Error(message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockManager_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockManager_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - message string
//   - args ...interface{}
func (_e *MockManager_Expecter) Error(message interface{}, args ...interface{}) *MockManager_Error_Call {
	return &MockManager_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{message}, args...)...)}
}

func (_c *MockManager_Error_Call) Run(run func(message string, args ...interface{})) *MockManager_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_Error_Call) Return() *MockManager_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Error_Call) RunAndReturn(run func(string, ...interface{})) *MockManager_Error_Call {
	_c.Run(run)
	return _c
}

// Fatal provides a mock function with given fields: message, args
func (_m *MockManager) Fatal(message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockManager_Fatal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fatal'
type MockManager_Fatal_Call struct {
	*mock.Call
}

// Fatal is a helper method to define mock.On call
//   - message string
//   - args ...interface{}
func (_e *MockManager_Expecter) Fatal(message interface{}, args ...interface{}) *MockManager_Fatal_Call {
	return &MockManager_Fatal_Call{Call: _e.mock.On("Fatal",
		append([]interface{}{message}, args...)...)}
}

func (_c *MockManager_Fatal_Call) Run(run func(message string, args ...interface{})) *MockManager_Fatal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_Fatal_Call) Return() *MockManager_Fatal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Fatal_Call) RunAndReturn(run func(string, ...interface{})) *MockManager_Fatal_Call {
	_c.Run(run)
	return _c
}

// GetHandler provides a mock function with given fields: name
func (_m *MockManager) GetHandler(name string) handler.Handler {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetHandler")
	}

	var r0 handler.Handler
	if rf, ok := ret.Get(0).(func(string) handler.Handler); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.Handler)
		}
	}

	return r0
}

// MockManager_GetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHandler'
type MockManager_GetHandler_Call struct {
	*mock.Call
}

// GetHandler is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) GetHandler(name interface{}) *MockManager_GetHandler_Call {
	return &MockManager_GetHandler_Call{Call: _e.mock.On("GetHandler", name)}
}

func (_c *MockManager_GetHandler_Call) Run(run func(name string)) *MockManager_GetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetHandler_Call) Return(_a0 handler.Handler) *MockManager_GetHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetHandler_Call) RunAndReturn(run func(string) handler.Handler) *MockManager_GetHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: message, args
func (_m *MockManager) Info(message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockManager_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockManager_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - message string
//   - args ...interface{}
func (_e *MockManager_Expecter) Info(message interface{}, args ...interface{}) *MockManager_Info_Call {
	return &MockManager_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{message}, args...)...)}
}

func (_c *MockManager_Info_Call) Run(run func(message string, args ...interface{})) *MockManager_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_Info_Call) Return() *MockManager_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Info_Call) RunAndReturn(run func(string, ...interface{})) *MockManager_Info_Call {
	_c.Run(run)
	return _c
}

// RemoveHandler provides a mock function with given fields: name
func (_m *MockManager) RemoveHandler(name string) {
	_m.Called(name)
}

// MockManager_RemoveHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveHandler'
type MockManager_RemoveHandler_Call struct {
	*mock.Call
}

// RemoveHandler is a helper method to define mock.On call
//   - name string
func (_e *MockManager_Expecter) RemoveHandler(name interface{}) *MockManager_RemoveHandler_Call {
	return &MockManager_RemoveHandler_Call{Call: _e.mock.On("RemoveHandler", name)}
}

func (_c *MockManager_RemoveHandler_Call) Run(run func(name string)) *MockManager_RemoveHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_RemoveHandler_Call) Return() *MockManager_RemoveHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_RemoveHandler_Call) RunAndReturn(run func(string)) *MockManager_RemoveHandler_Call {
	_c.Run(run)
	return _c
}

// SetMinLevel provides a mock function with given fields: level
func (_m *MockManager) SetMinLevel(level handler.Level) {
	_m.Called(level)
}

// MockManager_SetMinLevel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMinLevel'
type MockManager_SetMinLevel_Call struct {
	*mock.Call
}

// SetMinLevel is a helper method to define mock.On call
//   - level handler.Level
func (_e *MockManager_Expecter) SetMinLevel(level interface{}) *MockManager_SetMinLevel_Call {
	return &MockManager_SetMinLevel_Call{Call: _e.mock.On("SetMinLevel", level)}
}

func (_c *MockManager_SetMinLevel_Call) Run(run func(level handler.Level)) *MockManager_SetMinLevel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(handler.Level))
	})
	return _c
}

func (_c *MockManager_SetMinLevel_Call) Return() *MockManager_SetMinLevel_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetMinLevel_Call) RunAndReturn(run func(handler.Level)) *MockManager_SetMinLevel_Call {
	_c.Run(run)
	return _c
}

// Warning provides a mock function with given fields: message, args
func (_m *MockManager) Warning(message string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, message)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// MockManager_Warning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warning'
type MockManager_Warning_Call struct {
	*mock.Call
}

// Warning is a helper method to define mock.On call
//   - message string
//   - args ...interface{}
func (_e *MockManager_Expecter) Warning(message interface{}, args ...interface{}) *MockManager_Warning_Call {
	return &MockManager_Warning_Call{Call: _e.mock.On("Warning",
		append([]interface{}{message}, args...)...)}
}

func (_c *MockManager_Warning_Call) Run(run func(message string, args ...interface{})) *MockManager_Warning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockManager_Warning_Call) Return() *MockManager_Warning_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_Warning_Call) RunAndReturn(run func(string, ...interface{})) *MockManager_Warning_Call {
	_c.Run(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
