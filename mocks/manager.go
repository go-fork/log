// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	log "go.fork.vn/log"
	handler "go.fork.vn/log/handler"

	mock "github.com/stretchr/testify/mock"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// AddHandler provides a mock function with given fields: handlerType, _a1
func (_m *MockManager) AddHandler(handlerType log.HandlerType, _a1 handler.Handler) {
	_m.Called(handlerType, _a1)
}

// MockManager_AddHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHandler'
type MockManager_AddHandler_Call struct {
	*mock.Call
}

// AddHandler is a helper method to define mock.On call
//   - handlerType log.HandlerType
//   - _a1 handler.Handler
func (_e *MockManager_Expecter) AddHandler(handlerType interface{}, _a1 interface{}) *MockManager_AddHandler_Call {
	return &MockManager_AddHandler_Call{Call: _e.mock.On("AddHandler", handlerType, _a1)}
}

func (_c *MockManager_AddHandler_Call) Run(run func(handlerType log.HandlerType, _a1 handler.Handler)) *MockManager_AddHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.HandlerType), args[1].(handler.Handler))
	})
	return _c
}

func (_c *MockManager_AddHandler_Call) Return() *MockManager_AddHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_AddHandler_Call) RunAndReturn(run func(log.HandlerType, handler.Handler)) *MockManager_AddHandler_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockManager) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockManager_Expecter) Close() *MockManager_Close_Call {
	return &MockManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockManager_Close_Call) Run(run func()) *MockManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Close_Call) Return(_a0 error) *MockManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Close_Call) RunAndReturn(run func() error) *MockManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetHandler provides a mock function with given fields: handlerType
func (_m *MockManager) GetHandler(handlerType log.HandlerType) handler.Handler {
	ret := _m.Called(handlerType)

	if len(ret) == 0 {
		panic("no return value specified for GetHandler")
	}

	var r0 handler.Handler
	if rf, ok := ret.Get(0).(func(log.HandlerType) handler.Handler); ok {
		r0 = rf(handlerType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(handler.Handler)
		}
	}

	return r0
}

// MockManager_GetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHandler'
type MockManager_GetHandler_Call struct {
	*mock.Call
}

// GetHandler is a helper method to define mock.On call
//   - handlerType log.HandlerType
func (_e *MockManager_Expecter) GetHandler(handlerType interface{}) *MockManager_GetHandler_Call {
	return &MockManager_GetHandler_Call{Call: _e.mock.On("GetHandler", handlerType)}
}

func (_c *MockManager_GetHandler_Call) Run(run func(handlerType log.HandlerType)) *MockManager_GetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.HandlerType))
	})
	return _c
}

func (_c *MockManager_GetHandler_Call) Return(_a0 handler.Handler) *MockManager_GetHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetHandler_Call) RunAndReturn(run func(log.HandlerType) handler.Handler) *MockManager_GetHandler_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogger provides a mock function with given fields: context
func (_m *MockManager) GetLogger(context string) log.Logger {
	ret := _m.Called(context)

	if len(ret) == 0 {
		panic("no return value specified for GetLogger")
	}

	var r0 log.Logger
	if rf, ok := ret.Get(0).(func(string) log.Logger); ok {
		r0 = rf(context)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Logger)
		}
	}

	return r0
}

// MockManager_GetLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogger'
type MockManager_GetLogger_Call struct {
	*mock.Call
}

// GetLogger is a helper method to define mock.On call
//   - context string
func (_e *MockManager_Expecter) GetLogger(context interface{}) *MockManager_GetLogger_Call {
	return &MockManager_GetLogger_Call{Call: _e.mock.On("GetLogger", context)}
}

func (_c *MockManager_GetLogger_Call) Run(run func(context string)) *MockManager_GetLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockManager_GetLogger_Call) Return(_a0 log.Logger) *MockManager_GetLogger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetLogger_Call) RunAndReturn(run func(string) log.Logger) *MockManager_GetLogger_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveHandler provides a mock function with given fields: handlerType
func (_m *MockManager) RemoveHandler(handlerType log.HandlerType) {
	_m.Called(handlerType)
}

// MockManager_RemoveHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveHandler'
type MockManager_RemoveHandler_Call struct {
	*mock.Call
}

// RemoveHandler is a helper method to define mock.On call
//   - handlerType log.HandlerType
func (_e *MockManager_Expecter) RemoveHandler(handlerType interface{}) *MockManager_RemoveHandler_Call {
	return &MockManager_RemoveHandler_Call{Call: _e.mock.On("RemoveHandler", handlerType)}
}

func (_c *MockManager_RemoveHandler_Call) Run(run func(handlerType log.HandlerType)) *MockManager_RemoveHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(log.HandlerType))
	})
	return _c
}

func (_c *MockManager_RemoveHandler_Call) Return() *MockManager_RemoveHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_RemoveHandler_Call) RunAndReturn(run func(log.HandlerType)) *MockManager_RemoveHandler_Call {
	_c.Run(run)
	return _c
}

// SetHandler provides a mock function with given fields: loggerContext, handlerType
func (_m *MockManager) SetHandler(loggerContext string, handlerType log.HandlerType) {
	_m.Called(loggerContext, handlerType)
}

// MockManager_SetHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHandler'
type MockManager_SetHandler_Call struct {
	*mock.Call
}

// SetHandler is a helper method to define mock.On call
//   - loggerContext string
//   - handlerType log.HandlerType
func (_e *MockManager_Expecter) SetHandler(loggerContext interface{}, handlerType interface{}) *MockManager_SetHandler_Call {
	return &MockManager_SetHandler_Call{Call: _e.mock.On("SetHandler", loggerContext, handlerType)}
}

func (_c *MockManager_SetHandler_Call) Run(run func(loggerContext string, handlerType log.HandlerType)) *MockManager_SetHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(log.HandlerType))
	})
	return _c
}

func (_c *MockManager_SetHandler_Call) Return() *MockManager_SetHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockManager_SetHandler_Call) RunAndReturn(run func(string, log.HandlerType)) *MockManager_SetHandler_Call {
	_c.Run(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
